"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/pets/add/page",{

/***/ "(app-pages-browser)/./lib/cloudinary.ts":
/*!***************************!*\
  !*** ./lib/cloudinary.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testCloudinaryConnection: function() { return /* binding */ testCloudinaryConnection; },\n/* harmony export */   uploadToCloudinary: function() { return /* binding */ uploadToCloudinary; }\n/* harmony export */ });\n// Test function to check Cloudinary connectivity via our API route\nconst testCloudinaryConnection = async ()=>{\n    console.log(\"=== TESTING CLOUDINARY VIA BACKEND API ===\");\n    try {\n        // Create a minimal test file\n        const testFile = new File([\n            \"test\"\n        ], \"test.txt\", {\n            type: \"text/plain\"\n        });\n        const formData = new FormData();\n        formData.append(\"file\", testFile);\n        console.log(\"\\uD83D\\uDCE4 Testing upload via backend API...\");\n        const response = await fetch(\"\".concat(\"http://localhost:5001\", \"/upload\"), {\n            method: \"POST\",\n            body: formData\n        });\n        console.log(\"\\uD83D\\uDCE5 Response Status:\", response.status);\n        const responseData = await response.json();\n        console.log(\"\\uD83D\\uDCE5 Response Data:\", responseData);\n        if (response.ok) {\n            console.log(\"✅ TEST PASSED - Backend upload is working!\");\n            return true;\n        } else {\n            console.log(\"❌ TEST FAILED:\", responseData.error);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"❌ Network error:\", error);\n        return false;\n    }\n};\n// Updated Cloudinary upload utility using backend API\nconst uploadToCloudinary = async (file)=>{\n    console.log(\"\\uD83D\\uDCE4 Uploading via backend API...\");\n    try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const response = await fetch(\"\".concat(\"http://localhost:5001\", \"/upload\"), {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(\"Upload failed: \".concat(errorData.error || errorData.message));\n        }\n        const data = await response.json();\n        console.log(\"✅ Upload successful:\", data.secure_url || data.url);\n        return data.secure_url || data.url;\n    } catch (error) {\n        console.error(\"❌ Upload error:\", error);\n        throw new Error(\"Failed to upload image\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9jbG91ZGluYXJ5LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUVBQW1FO0FBQzVELE1BQU1BLDJCQUEyQjtJQUN0Q0MsUUFBUUMsR0FBRyxDQUFDO0lBRVosSUFBSTtRQUNGLDZCQUE2QjtRQUM3QixNQUFNQyxXQUFXLElBQUlDLEtBQUs7WUFBQztTQUFPLEVBQUUsWUFBWTtZQUFFQyxNQUFNO1FBQWE7UUFDckUsTUFBTUMsV0FBVyxJQUFJQztRQUNyQkQsU0FBU0UsTUFBTSxDQUFDLFFBQVFMO1FBRXhCRixRQUFRQyxHQUFHLENBQUM7UUFFWixNQUFNTyxXQUFXLE1BQU1DLE1BQU0sR0FBbUMsT0FBaENDLHVCQUErQixFQUFDLFlBQVU7WUFDeEVHLFFBQVE7WUFDUkMsTUFBTVQ7UUFDUjtRQUVBTCxRQUFRQyxHQUFHLENBQUMsaUNBQXVCTyxTQUFTTyxNQUFNO1FBQ2xELE1BQU1DLGVBQWUsTUFBTVIsU0FBU1MsSUFBSTtRQUN4Q2pCLFFBQVFDLEdBQUcsQ0FBQywrQkFBcUJlO1FBRWpDLElBQUlSLFNBQVNVLEVBQUUsRUFBRTtZQUNmbEIsUUFBUUMsR0FBRyxDQUFDO1lBQ1osT0FBTztRQUNULE9BQU87WUFDTEQsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQmUsYUFBYUcsS0FBSztZQUNoRCxPQUFPO1FBQ1Q7SUFDRixFQUFFLE9BQU9BLE9BQU87UUFDZG5CLFFBQVFtQixLQUFLLENBQUMsb0JBQW9CQTtRQUNsQyxPQUFPO0lBQ1Q7QUFDRixFQUFFO0FBRUYsc0RBQXNEO0FBQy9DLE1BQU1DLHFCQUFxQixPQUFPQztJQUN2Q3JCLFFBQVFDLEdBQUcsQ0FBQztJQUVaLElBQUk7UUFDRixNQUFNSSxXQUFXLElBQUlDO1FBQ3JCRCxTQUFTRSxNQUFNLENBQUMsUUFBUWM7UUFFeEIsTUFBTWIsV0FBVyxNQUFNQyxNQUFNLEdBQW1DLE9BQWhDQyx1QkFBK0IsRUFBQyxZQUFVO1lBQ3hFRyxRQUFRO1lBQ1JDLE1BQU1UO1FBQ1I7UUFFQSxJQUFJLENBQUNHLFNBQVNVLEVBQUUsRUFBRTtZQUNoQixNQUFNSSxZQUFZLE1BQU1kLFNBQVNTLElBQUk7WUFDckMsTUFBTSxJQUFJTSxNQUFNLGtCQUF1RCxPQUFyQ0QsVUFBVUgsS0FBSyxJQUFJRyxVQUFVRSxPQUFPO1FBQ3hFO1FBRUEsTUFBTUMsT0FBTyxNQUFNakIsU0FBU1MsSUFBSTtRQUNoQ2pCLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0J3QixLQUFLQyxVQUFVLElBQUlELEtBQUtFLEdBQUc7UUFDL0QsT0FBT0YsS0FBS0MsVUFBVSxJQUFJRCxLQUFLRSxHQUFHO0lBRXBDLEVBQUUsT0FBT1IsT0FBTztRQUNkbkIsUUFBUW1CLEtBQUssQ0FBQyxtQkFBbUJBO1FBQ2pDLE1BQU0sSUFBSUksTUFBTTtJQUNsQjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2Nsb3VkaW5hcnkudHM/ODQ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUZXN0IGZ1bmN0aW9uIHRvIGNoZWNrIENsb3VkaW5hcnkgY29ubmVjdGl2aXR5IHZpYSBvdXIgQVBJIHJvdXRlXG5leHBvcnQgY29uc3QgdGVzdENsb3VkaW5hcnlDb25uZWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuICBjb25zb2xlLmxvZygnPT09IFRFU1RJTkcgQ0xPVURJTkFSWSBWSUEgQkFDS0VORCBBUEkgPT09Jyk7XG4gIFxuICB0cnkge1xuICAgIC8vIENyZWF0ZSBhIG1pbmltYWwgdGVzdCBmaWxlXG4gICAgY29uc3QgdGVzdEZpbGUgPSBuZXcgRmlsZShbJ3Rlc3QnXSwgJ3Rlc3QudHh0JywgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCB0ZXN0RmlsZSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/Cfk6QgVGVzdGluZyB1cGxvYWQgdmlhIGJhY2tlbmQgQVBJLi4uJyk7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMfS91cGxvYWRgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgIH0pO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn5OlIFJlc3BvbnNlIFN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zb2xlLmxvZygn8J+TpSBSZXNwb25zZSBEYXRhOicsIHJlc3BvbnNlRGF0YSk7XG4gICAgXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIFRFU1QgUEFTU0VEIC0gQmFja2VuZCB1cGxvYWQgaXMgd29ya2luZyEnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygn4p2MIFRFU1QgRkFJTEVEOicsIHJlc3BvbnNlRGF0YS5lcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBOZXR3b3JrIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIFVwZGF0ZWQgQ2xvdWRpbmFyeSB1cGxvYWQgdXRpbGl0eSB1c2luZyBiYWNrZW5kIEFQSVxuZXhwb3J0IGNvbnN0IHVwbG9hZFRvQ2xvdWRpbmFyeSA9IGFzeW5jIChmaWxlOiBGaWxlKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgY29uc29sZS5sb2coJ/Cfk6QgVXBsb2FkaW5nIHZpYSBiYWNrZW5kIEFQSS4uLicpO1xuICBcbiAgdHJ5IHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTH0vdXBsb2FkYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICB9KTtcbiAgICBcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVwbG9hZCBmYWlsZWQ6ICR7ZXJyb3JEYXRhLmVycm9yIHx8IGVycm9yRGF0YS5tZXNzYWdlfWApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnNvbGUubG9nKCfinIUgVXBsb2FkIHN1Y2Nlc3NmdWw6JywgZGF0YS5zZWN1cmVfdXJsIHx8IGRhdGEudXJsKTtcbiAgICByZXR1cm4gZGF0YS5zZWN1cmVfdXJsIHx8IGRhdGEudXJsO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBVcGxvYWQgZXJyb3I6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHVwbG9hZCBpbWFnZScpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInRlc3RDbG91ZGluYXJ5Q29ubmVjdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJ0ZXN0RmlsZSIsIkZpbGUiLCJ0eXBlIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfQVBJX1VSTCIsIm1ldGhvZCIsImJvZHkiLCJzdGF0dXMiLCJyZXNwb25zZURhdGEiLCJqc29uIiwib2siLCJlcnJvciIsInVwbG9hZFRvQ2xvdWRpbmFyeSIsImZpbGUiLCJlcnJvckRhdGEiLCJFcnJvciIsIm1lc3NhZ2UiLCJkYXRhIiwic2VjdXJlX3VybCIsInVybCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/cloudinary.ts\n"));

/***/ })

});