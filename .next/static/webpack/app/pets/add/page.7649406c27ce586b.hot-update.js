"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/pets/add/page",{

/***/ "(app-pages-browser)/./lib/cloudinary.ts":
/*!***************************!*\
  !*** ./lib/cloudinary.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testCloudinaryConnection: function() { return /* binding */ testCloudinaryConnection; },\n/* harmony export */   uploadToCloudinary: function() { return /* binding */ uploadToCloudinary; }\n/* harmony export */ });\n// Test function to check Cloudinary connectivity via our API route\nconst testCloudinaryConnection = async ()=>{\n    console.log(\"=== TESTING CLOUDINARY VIA API ROUTE ===\");\n    try {\n        // Create a minimal test file\n        const testFile = new File([\n            \"test\"\n        ], \"test.txt\", {\n            type: \"text/plain\"\n        });\n        const formData = new FormData();\n        formData.append(\"file\", testFile);\n        console.log(\"\\uD83D\\uDCE4 Testing upload via /api/upload...\");\n        const response = await fetch(\"/api/upload\", {\n            method: \"POST\",\n            body: formData\n        });\n        console.log(\"\\uD83D\\uDCE5 Response Status:\", response.status);\n        const responseData = await response.json();\n        console.log(\"\\uD83D\\uDCE5 Response Data:\", responseData);\n        if (response.ok) {\n            console.log(\"✅ TEST PASSED - Cloudinary API route is working!\");\n            return true;\n        } else {\n            console.log(\"❌ TEST FAILED:\", responseData.error);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"❌ Network error:\", error);\n        return false;\n    }\n};\n// Updated Cloudinary upload utility using our API route\nconst uploadToCloudinary = async (file)=>{\n    console.log(\"\\uD83D\\uDCE4 Uploading via secure API route...\");\n    try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const response = await fetch(\"/api/upload\", {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(\"Upload failed: \".concat(errorData.error));\n        }\n        const data = await response.json();\n        console.log(\"✅ Upload successful:\", data.secure_url);\n        return data.secure_url;\n    } catch (error) {\n        console.error(\"❌ Upload error:\", error);\n        throw new Error(\"Failed to upload image\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9jbG91ZGluYXJ5LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUVBQW1FO0FBQzVELE1BQU1BLDJCQUEyQjtJQUN0Q0MsUUFBUUMsR0FBRyxDQUFDO0lBRVosSUFBSTtRQUNGLDZCQUE2QjtRQUM3QixNQUFNQyxXQUFXLElBQUlDLEtBQUs7WUFBQztTQUFPLEVBQUUsWUFBWTtZQUFFQyxNQUFNO1FBQWE7UUFDckUsTUFBTUMsV0FBVyxJQUFJQztRQUNyQkQsU0FBU0UsTUFBTSxDQUFDLFFBQVFMO1FBRXhCRixRQUFRQyxHQUFHLENBQUM7UUFFWixNQUFNTyxXQUFXLE1BQU1DLE1BQU0sZUFBZTtZQUMxQ0MsUUFBUTtZQUNSQyxNQUFNTjtRQUNSO1FBRUFMLFFBQVFDLEdBQUcsQ0FBQyxpQ0FBdUJPLFNBQVNJLE1BQU07UUFDbEQsTUFBTUMsZUFBZSxNQUFNTCxTQUFTTSxJQUFJO1FBQ3hDZCxRQUFRQyxHQUFHLENBQUMsK0JBQXFCWTtRQUVqQyxJQUFJTCxTQUFTTyxFQUFFLEVBQUU7WUFDZmYsUUFBUUMsR0FBRyxDQUFDO1lBQ1osT0FBTztRQUNULE9BQU87WUFDTEQsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQlksYUFBYUcsS0FBSztZQUNoRCxPQUFPO1FBQ1Q7SUFDRixFQUFFLE9BQU9BLE9BQU87UUFDZGhCLFFBQVFnQixLQUFLLENBQUMsb0JBQW9CQTtRQUNsQyxPQUFPO0lBQ1Q7QUFDRixFQUFFO0FBRUYsd0RBQXdEO0FBQ2pELE1BQU1DLHFCQUFxQixPQUFPQztJQUN2Q2xCLFFBQVFDLEdBQUcsQ0FBQztJQUVaLElBQUk7UUFDRixNQUFNSSxXQUFXLElBQUlDO1FBQ3JCRCxTQUFTRSxNQUFNLENBQUMsUUFBUVc7UUFFeEIsTUFBTVYsV0FBVyxNQUFNQyxNQUFNLGVBQWU7WUFDMUNDLFFBQVE7WUFDUkMsTUFBTU47UUFDUjtRQUVBLElBQUksQ0FBQ0csU0FBU08sRUFBRSxFQUFFO1lBQ2hCLE1BQU1JLFlBQVksTUFBTVgsU0FBU00sSUFBSTtZQUNyQyxNQUFNLElBQUlNLE1BQU0sa0JBQWtDLE9BQWhCRCxVQUFVSCxLQUFLO1FBQ25EO1FBRUEsTUFBTUssT0FBTyxNQUFNYixTQUFTTSxJQUFJO1FBQ2hDZCxRQUFRQyxHQUFHLENBQUMsd0JBQXdCb0IsS0FBS0MsVUFBVTtRQUNuRCxPQUFPRCxLQUFLQyxVQUFVO0lBRXhCLEVBQUUsT0FBT04sT0FBTztRQUNkaEIsUUFBUWdCLEtBQUssQ0FBQyxtQkFBbUJBO1FBQ2pDLE1BQU0sSUFBSUksTUFBTTtJQUNsQjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2Nsb3VkaW5hcnkudHM/ODQ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUZXN0IGZ1bmN0aW9uIHRvIGNoZWNrIENsb3VkaW5hcnkgY29ubmVjdGl2aXR5IHZpYSBvdXIgQVBJIHJvdXRlXG5leHBvcnQgY29uc3QgdGVzdENsb3VkaW5hcnlDb25uZWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuICBjb25zb2xlLmxvZygnPT09IFRFU1RJTkcgQ0xPVURJTkFSWSBWSUEgQVBJIFJPVVRFID09PScpO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBDcmVhdGUgYSBtaW5pbWFsIHRlc3QgZmlsZVxuICAgIGNvbnN0IHRlc3RGaWxlID0gbmV3IEZpbGUoWyd0ZXN0J10sICd0ZXN0LnR4dCcsIHsgdHlwZTogJ3RleHQvcGxhaW4nIH0pO1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgdGVzdEZpbGUpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn5OkIFRlc3RpbmcgdXBsb2FkIHZpYSAvYXBpL3VwbG9hZC4uLicpO1xuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvdXBsb2FkJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICB9KTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+TpSBSZXNwb25zZSBTdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc29sZS5sb2coJ/Cfk6UgUmVzcG9uc2UgRGF0YTonLCByZXNwb25zZURhdGEpO1xuICAgIFxuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgY29uc29sZS5sb2coJ+KchSBURVNUIFBBU1NFRCAtIENsb3VkaW5hcnkgQVBJIHJvdXRlIGlzIHdvcmtpbmchJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ+KdjCBURVNUIEZBSUxFRDonLCByZXNwb25zZURhdGEuZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgTmV0d29yayBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBVcGRhdGVkIENsb3VkaW5hcnkgdXBsb2FkIHV0aWxpdHkgdXNpbmcgb3VyIEFQSSByb3V0ZVxuZXhwb3J0IGNvbnN0IHVwbG9hZFRvQ2xvdWRpbmFyeSA9IGFzeW5jIChmaWxlOiBGaWxlKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgY29uc29sZS5sb2coJ/Cfk6QgVXBsb2FkaW5nIHZpYSBzZWN1cmUgQVBJIHJvdXRlLi4uJyk7XG4gIFxuICB0cnkge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSk7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS91cGxvYWQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgIH0pO1xuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVXBsb2FkIGZhaWxlZDogJHtlcnJvckRhdGEuZXJyb3J9YCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc29sZS5sb2coJ+KchSBVcGxvYWQgc3VjY2Vzc2Z1bDonLCBkYXRhLnNlY3VyZV91cmwpO1xuICAgIHJldHVybiBkYXRhLnNlY3VyZV91cmw7XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIFVwbG9hZCBlcnJvcjonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdXBsb2FkIGltYWdlJyk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsidGVzdENsb3VkaW5hcnlDb25uZWN0aW9uIiwiY29uc29sZSIsImxvZyIsInRlc3RGaWxlIiwiRmlsZSIsInR5cGUiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJzdGF0dXMiLCJyZXNwb25zZURhdGEiLCJqc29uIiwib2siLCJlcnJvciIsInVwbG9hZFRvQ2xvdWRpbmFyeSIsImZpbGUiLCJlcnJvckRhdGEiLCJFcnJvciIsImRhdGEiLCJzZWN1cmVfdXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/cloudinary.ts\n"));

/***/ })

});